# Duolingo Clone Backend - Environment Variables Example
# Copy this file to .env and update values for your environment
#
# IMPORTANT: Never commit the .env file to version control!
# This .env.example file serves as documentation for required variables.

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Application name displayed in logs and UI
APP_NAME="Duolingo Clone API"

# Application version (update with releases)
APP_VERSION="0.1.0"

# Enable debug mode (MUST be false in production)
# - true: Detailed error messages, hot reload enabled
# - false: Generic error messages, optimized performance
DEBUG=true

# Environment: development, staging, production, test
# - development: Relaxed security, SQLite DB, debug enabled
# - staging: Production-like with some debugging
# - production: Full security, PostgreSQL required, no debug
# - test: For automated testing, uses test database
ENVIRONMENT=development

# =============================================================================
# SERVER SETTINGS
# =============================================================================

# Host to bind the server to
# - 0.0.0.0: Listen on all interfaces (for Docker)
# - 127.0.0.1: Listen only on localhost
HOST=0.0.0.0

# Port for the API server
PORT=8000

# Auto-reload on code changes (development only)
RELOAD=true

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Option 1: Full database URL (overrides individual settings)
# Format: postgresql://user:password@host:port/dbname
# DATABASE_URL="postgresql://postgres:password@localhost:5432/duolingo_clone"

# Option 2: Individual database settings (used if DATABASE_URL not set)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=duolingo_clone
DB_USER=postgres
DB_PASSWORD=password  # Change this!

# Connection pool settings
DB_POOL_SIZE=10       # Number of persistent connections
DB_MAX_OVERFLOW=20    # Maximum overflow connections

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Secret key for JWT and session encryption (minimum 32 characters)
# IMPORTANT: Generate a secure key with: openssl rand -hex 32
SECRET_KEY="dev-secret-key-change-in-production"

# JWT Configuration
JWT_ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=15      # Short-lived access tokens
REFRESH_TOKEN_EXPIRE_DAYS=7         # Refresh token validity
PASSWORD_RESET_EXPIRE_HOURS=1       # Password reset link expiry

# Session Management
SESSION_EXPIRE_DAYS=30              # Default session duration
REMEMBER_ME_EXPIRE_DAYS=30          # Remember me duration
MAX_ACTIVE_SESSIONS=5               # Max concurrent sessions per user
SESSION_ACTIVITY_TIMEOUT_HOURS=720   # 30 days inactivity timeout

# Password Policy
PASSWORD_MIN_LENGTH=8
PASSWORD_MAX_LENGTH=128
PASSWORD_REQUIRE_UPPERCASE=true
PASSWORD_REQUIRE_LOWERCASE=true
PASSWORD_REQUIRE_DIGITS=true
PASSWORD_REQUIRE_SPECIAL_CHARS=true
PASSWORD_PREVENT_COMMON=true
PASSWORD_HISTORY_COUNT=5            # Prevent reuse of last N passwords
# PASSWORD_EXPIRY_DAYS=90           # Uncomment to enforce password expiry

# Email Verification
REQUIRE_EMAIL_VERIFICATION=false    # Set to true in production

# CSRF Protection
CSRF_PROTECTION_ENABLED=true

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Allowed origins (comma-separated)
# Update with your frontend URLs in production
CORS_ORIGINS="http://localhost:3000,http://127.0.0.1:3000"
CORS_ALLOW_CREDENTIALS=true

# =============================================================================
# REDIS CONFIGURATION (Caching & Rate Limiting)
# =============================================================================

# Option 1: Full Redis URL
# REDIS_URL="redis://username:password@localhost:6379/0"

# Option 2: Individual Redis settings
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=""    # Set if Redis requires authentication
REDIS_DB=0           # Database number (0-15)

# =============================================================================
# RATE LIMITING
# =============================================================================

RATE_LIMITING_ENABLED=true

# Login rate limiting
LOGIN_RATE_LIMIT_ATTEMPTS=5
LOGIN_RATE_LIMIT_WINDOW_MINUTES=15
LOGIN_LOCKOUT_DURATION_MINUTES=30

# Password reset rate limiting
PASSWORD_RESET_RATE_LIMIT_ATTEMPTS=3
PASSWORD_RESET_RATE_LIMIT_WINDOW_HOURS=1

# Registration rate limiting
REGISTRATION_RATE_LIMIT_ATTEMPTS=3
REGISTRATION_RATE_LIMIT_WINDOW_HOURS=1

# =============================================================================
# ACCOUNT LOCKOUT SETTINGS
# =============================================================================

LOCKOUT_MAX_FAILED_ATTEMPTS=5
LOCKOUT_DURATION_MINUTES=30
LOCKOUT_PROGRESSIVE_ENABLED=true    # Increase lockout duration on repeated failures
LOCKOUT_MAX_DURATION_HOURS=24
RAPID_FIRE_THRESHOLD_SECONDS=5      # Detect rapid-fire attacks
RAPID_FIRE_MAX_ATTEMPTS=3
MULTIPLE_IP_THRESHOLD=3             # Detect distributed attacks
MULTIPLE_IP_WINDOW_HOURS=1
PERMANENT_LOCKOUT_THRESHOLD=10      # Permanent lockout after N failures

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================

# OpenAI API for content generation
OPENAI_API_KEY=""    # sk-... format

# =============================================================================
# SUPABASE CONFIGURATION (Authentication & Database)
# =============================================================================

# Your Supabase project URL
SUPABASE_URL="https://your-project.supabase.co"

# Supabase anonymous key (safe for client-side)
SUPABASE_ANON_KEY="your-anon-key"

# Supabase service role key (server-side only, keep secret!)
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"

# JWT secret from Supabase dashboard (Settings > API)
SUPABASE_JWT_SECRET="your-jwt-secret"

# =============================================================================
# OAUTH PROVIDERS
# =============================================================================

# Frontend URL for OAuth redirects
FRONTEND_URL="http://localhost:3000"
# OAUTH_REDIRECT_URL=""  # Optional, defaults to FRONTEND_URL/auth/callback

# Google OAuth (https://console.cloud.google.com)
GOOGLE_CLIENT_ID=""
GOOGLE_CLIENT_SECRET=""

# Apple OAuth (https://developer.apple.com)
APPLE_CLIENT_ID=""
APPLE_TEAM_ID=""
APPLE_KEY_ID=""
APPLE_PRIVATE_KEY_PATH=""  # Path to .p8 file

# Facebook OAuth (https://developers.facebook.com)
FACEBOOK_APP_ID=""
FACEBOOK_APP_SECRET=""

# TikTok OAuth (https://developers.tiktok.com)
TIKTOK_CLIENT_KEY=""
TIKTOK_CLIENT_SECRET=""

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================

SMTP_HOST=""         # e.g., smtp.gmail.com
SMTP_PORT=587        # 587 for TLS, 465 for SSL
SMTP_USERNAME=""
SMTP_PASSWORD=""
SMTP_USE_TLS=true
FROM_EMAIL="noreply@duolingoclone.com"

# =============================================================================
# LOGGING
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL="INFO"

# Log format: json (structured) or text (human-readable)
LOG_FORMAT="json"

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATION NOTES
# =============================================================================
#
# DEVELOPMENT:
# - Uses SQLite by default (no DATABASE_URL needed)
# - Debug mode enabled
# - Relaxed security settings
# - Email verification disabled
#
# STAGING:
# - Requires PostgreSQL database
# - Debug mode should be disabled
# - Use staging-specific API keys
# - Test OAuth integrations
#
# PRODUCTION:
# - PostgreSQL required (set DATABASE_URL)
# - Debug MUST be false
# - Strong SECRET_KEY required (32+ chars)
# - Email verification enabled
# - All OAuth providers configured
# - CORS origins set to production domains
# - Proper SMTP configuration
# - Rate limiting enabled
# - HTTPS required for all URLs
#
# TEST:
# - Uses separate test database
# - Rate limiting disabled
# - Mock external services