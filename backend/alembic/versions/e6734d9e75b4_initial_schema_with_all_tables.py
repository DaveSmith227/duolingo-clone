"""Initial schema with all tables

Revision ID: e6734d9e75b4
Revises: 
Create Date: 2025-07-04 14:45:31.048386

"""
from typing import Sequence, Union
import sys
import os

from alembic import op
import sqlalchemy as sa

# Add the project root to Python path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from app.models.base import UUID


# revision identifiers, used by Alembic.
revision: str = 'e6734d9e75b4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievements',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('achievement_type', sa.String(length=20), nullable=False),
    sa.Column('icon_url', sa.String(length=500), nullable=True),
    sa.Column('badge_color', sa.String(length=20), nullable=True),
    sa.Column('xp_reward', sa.Integer(), nullable=False),
    sa.Column('hearts_reward', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_hidden', sa.Boolean(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('requirements', sa.Text(), nullable=True),
    sa.Column('achievement_metadata', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('hearts_reward >= 0', name='check_hearts_reward_non_negative'),
    sa.CheckConstraint('xp_reward >= 0', name='check_xp_reward_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('audio_files',
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('quality', sa.String(length=20), nullable=False),
    sa.Column('bitrate', sa.Integer(), nullable=True),
    sa.Column('sample_rate', sa.Integer(), nullable=True),
    sa.Column('language_code', sa.String(length=10), nullable=True),
    sa.Column('speaker_gender', sa.String(length=10), nullable=True),
    sa.Column('speaker_accent', sa.String(length=50), nullable=True),
    sa.Column('transcript', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("quality IN ('low', 'standard', 'high')", name='ck_audio_file_quality_valid'),
    sa.CheckConstraint("speaker_gender IS NULL OR speaker_gender IN ('male', 'female', 'other')", name='ck_audio_file_speaker_gender_valid'),
    sa.CheckConstraint('bitrate IS NULL OR bitrate > 0', name='ck_audio_file_bitrate_positive'),
    sa.CheckConstraint('duration IS NULL OR duration > 0', name='ck_audio_file_duration_positive'),
    sa.CheckConstraint('file_size > 0', name='ck_audio_file_size_positive'),
    sa.CheckConstraint('sample_rate IS NULL OR sample_rate > 0', name='ck_audio_file_sample_rate_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('exercise_types',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('icon', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('supports_audio', sa.Boolean(), nullable=False),
    sa.Column('supports_images', sa.Boolean(), nullable=False),
    sa.Column('requires_text_input', sa.Boolean(), nullable=False),
    sa.Column('requires_multiple_choice', sa.Boolean(), nullable=False),
    sa.Column('max_options', sa.Integer(), nullable=True),
    sa.Column('default_time_limit', sa.Integer(), nullable=True),
    sa.Column('xp_reward', sa.Integer(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('default_time_limit IS NULL OR default_time_limit > 0', name='ck_exercise_type_time_limit_positive'),
    sa.CheckConstraint('max_options IS NULL OR max_options > 0', name='ck_exercise_type_max_options_positive'),
    sa.CheckConstraint('xp_reward >= 0', name='ck_exercise_type_xp_reward_non_negative'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exercise_types_name'), 'exercise_types', ['name'], unique=True)
    op.create_table('languages',
    sa.Column('code', sa.String(length=10), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('native_name', sa.String(length=100), nullable=True),
    sa.Column('flag_url', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_languages_code'), 'languages', ['code'], unique=True)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('is_email_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True),
    sa.Column('password_reset_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('daily_xp_goal', sa.Integer(), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('daily_xp_goal IN (10, 20, 30, 50)', name='valid_daily_xp_goal'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('courses',
    sa.Column('from_language_id', sa.String(length=36), nullable=False),
    sa.Column('to_language_id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('difficulty_level', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("difficulty_level IN ('beginner', 'intermediate', 'advanced')", name='valid_difficulty_level'),
    sa.CheckConstraint('from_language_id != to_language_id', name='different_languages'),
    sa.ForeignKeyConstraint(['from_language_id'], ['languages.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_language_id'], ['languages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('from_language_id', 'to_language_id', name='uq_course_languages')
    )
    op.create_index(op.f('ix_courses_from_language_id'), 'courses', ['from_language_id'], unique=False)
    op.create_index(op.f('ix_courses_to_language_id'), 'courses', ['to_language_id'], unique=False)
    op.create_table('exercises',
    sa.Column('exercise_type_id', sa.String(length=36), nullable=False),
    sa.Column('prompt', sa.Text(), nullable=False),
    sa.Column('prompt_audio_id', sa.String(length=36), nullable=True),
    sa.Column('correct_answer', sa.Text(), nullable=False),
    sa.Column('alternate_answers', sa.Text(), nullable=True),
    sa.Column('hint', sa.Text(), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('difficulty', sa.String(length=20), nullable=False),
    sa.Column('estimated_time', sa.Integer(), nullable=False),
    sa.Column('xp_reward', sa.Integer(), nullable=True),
    sa.Column('content_metadata', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("difficulty IN ('beginner', 'intermediate', 'advanced')", name='ck_exercise_difficulty_valid'),
    sa.CheckConstraint('estimated_time > 0', name='ck_exercise_estimated_time_positive'),
    sa.CheckConstraint('xp_reward IS NULL OR xp_reward >= 0', name='ck_exercise_xp_reward_non_negative'),
    sa.ForeignKeyConstraint(['exercise_type_id'], ['exercise_types.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prompt_audio_id'], ['audio_files.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exercises_exercise_type_id'), 'exercises', ['exercise_type_id'], unique=False)
    op.create_table('o_auth_providers',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('provider_user_id', sa.String(length=255), nullable=False),
    sa.Column('access_token', sa.String(length=1000), nullable=True),
    sa.Column('refresh_token', sa.String(length=1000), nullable=True),
    sa.Column('token_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("provider IN ('google', 'tiktok', 'facebook', 'apple')", name='valid_oauth_provider'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider', 'provider_user_id', name='uq_oauth_provider_user')
    )
    op.create_index(op.f('ix_o_auth_providers_user_id'), 'o_auth_providers', ['user_id'], unique=False)
    op.create_table('system_audit_logs',
    sa.Column('admin_user_id', sa.String(length=36), nullable=True),
    sa.Column('action_type', sa.String(length=30), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', sa.String(length=36), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('before_state', sa.Text(), nullable=True),
    sa.Column('after_state', sa.Text(), nullable=True),
    sa.Column('audit_metadata', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_system_audit_action_time', 'system_audit_logs', ['action_type', 'created_at'], unique=False)
    op.create_index('idx_system_audit_admin_time', 'system_audit_logs', ['admin_user_id', 'created_at'], unique=False)
    op.create_index('idx_system_audit_resource', 'system_audit_logs', ['resource_type', 'resource_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_system_audit_logs_action_type'), 'system_audit_logs', ['action_type'], unique=False)
    op.create_index(op.f('ix_system_audit_logs_admin_user_id'), 'system_audit_logs', ['admin_user_id'], unique=False)
    op.create_index(op.f('ix_system_audit_logs_resource_id'), 'system_audit_logs', ['resource_id'], unique=False)
    op.create_table('exercise_options',
    sa.Column('exercise_id', sa.String(length=36), nullable=False),
    sa.Column('option_text', sa.String(length=500), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.Column('display_order', sa.Integer(), nullable=False),
    sa.Column('option_audio_id', sa.String(length=36), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('display_order > 0', name='ck_exercise_option_display_order_positive'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['option_audio_id'], ['audio_files.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('exercise_id', 'display_order', name='uq_exercise_option_display_order')
    )
    op.create_index(op.f('ix_exercise_options_exercise_id'), 'exercise_options', ['exercise_id'], unique=False)
    op.create_table('sections',
    sa.Column('course_id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('cefr_level', sa.String(length=10), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("cefr_level IS NULL OR cefr_level IN ('A1', 'A2', 'B1', 'B2', 'C1', 'C2')", name='valid_cefr_level'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('course_id', 'sort_order', name='uq_section_course_order')
    )
    op.create_index(op.f('ix_sections_course_id'), 'sections', ['course_id'], unique=False)
    op.create_table('user_achievements',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('achievement_id', sa.String(length=36), nullable=False),
    sa.Column('earned_at', sa.DateTime(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('current_value', sa.Integer(), nullable=False),
    sa.Column('target_value', sa.Integer(), nullable=True),
    sa.Column('xp_awarded', sa.Integer(), nullable=False),
    sa.Column('hearts_awarded', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.String(length=36), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('current_value >= 0', name='check_current_value_non_negative'),
    sa.CheckConstraint('hearts_awarded >= 0', name='check_hearts_awarded_non_negative'),
    sa.CheckConstraint('progress <= 100.0', name='check_progress_max'),
    sa.CheckConstraint('progress >= 0.0', name='check_progress_min'),
    sa.CheckConstraint('target_value >= 0', name='check_target_value_non_negative'),
    sa.CheckConstraint('xp_awarded >= 0', name='check_xp_awarded_non_negative'),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'achievement_id', name='unique_user_achievement')
    )
    op.create_index(op.f('ix_user_achievements_achievement_id'), 'user_achievements', ['achievement_id'], unique=False)
    op.create_index(op.f('ix_user_achievements_user_id'), 'user_achievements', ['user_id'], unique=False)
    op.create_table('user_courses',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('course_id', sa.String(length=36), nullable=False),
    sa.Column('total_xp', sa.Integer(), nullable=False),
    sa.Column('current_streak', sa.Integer(), nullable=False),
    sa.Column('longest_streak', sa.Integer(), nullable=False),
    sa.Column('current_hearts', sa.Integer(), nullable=False),
    sa.Column('max_hearts', sa.Integer(), nullable=False),
    sa.Column('last_heart_refill', sa.DateTime(), nullable=False),
    sa.Column('last_activity_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('completion_percentage', sa.Float(), nullable=False),
    sa.Column('enrolled_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('completion_percentage <= 100.0', name='check_completion_percentage_max'),
    sa.CheckConstraint('completion_percentage >= 0.0', name='check_completion_percentage_min'),
    sa.CheckConstraint('current_hearts <= max_hearts', name='check_current_hearts_not_exceed_max'),
    sa.CheckConstraint('current_hearts >= 0', name='check_current_hearts_non_negative'),
    sa.CheckConstraint('current_streak >= 0', name='check_current_streak_non_negative'),
    sa.CheckConstraint('longest_streak >= 0', name='check_longest_streak_non_negative'),
    sa.CheckConstraint('max_hearts > 0', name='check_max_hearts_positive'),
    sa.CheckConstraint('total_xp >= 0', name='check_total_xp_non_negative'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'course_id', name='unique_user_course_enrollment')
    )
    op.create_index(op.f('ix_user_courses_course_id'), 'user_courses', ['course_id'], unique=False)
    op.create_index(op.f('ix_user_courses_user_id'), 'user_courses', ['user_id'], unique=False)
    op.create_table('user_daily_xps',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('course_id', sa.String(length=36), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('xp_earned', sa.Integer(), nullable=False),
    sa.Column('daily_goal', sa.Integer(), nullable=False),
    sa.Column('goal_met', sa.Boolean(), nullable=False),
    sa.Column('lessons_completed', sa.Integer(), nullable=False),
    sa.Column('exercises_completed', sa.Integer(), nullable=False),
    sa.Column('time_spent', sa.Integer(), nullable=False),
    sa.Column('streak_count', sa.Integer(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('daily_goal > 0', name='check_daily_goal_positive'),
    sa.CheckConstraint('exercises_completed >= 0', name='check_exercises_completed_non_negative'),
    sa.CheckConstraint('lessons_completed >= 0', name='check_lessons_completed_non_negative'),
    sa.CheckConstraint('streak_count >= 0', name='check_streak_count_non_negative'),
    sa.CheckConstraint('time_spent >= 0', name='check_time_spent_non_negative'),
    sa.CheckConstraint('xp_earned >= 0', name='check_xp_earned_non_negative'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'course_id', 'date', name='unique_user_course_daily_xp')
    )
    op.create_index(op.f('ix_user_daily_xps_course_id'), 'user_daily_xps', ['course_id'], unique=False)
    op.create_index(op.f('ix_user_daily_xps_date'), 'user_daily_xps', ['date'], unique=False)
    op.create_index(op.f('ix_user_daily_xps_user_id'), 'user_daily_xps', ['user_id'], unique=False)
    op.create_table('units',
    sa.Column('section_id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('icon_url', sa.String(length=500), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['section_id'], ['sections.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('section_id', 'sort_order', name='uq_unit_section_order')
    )
    op.create_index(op.f('ix_units_section_id'), 'units', ['section_id'], unique=False)
    op.create_table('lessons',
    sa.Column('unit_id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('estimated_minutes', sa.Integer(), nullable=False),
    sa.Column('xp_reward', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('estimated_minutes > 0 AND estimated_minutes <= 120', name='valid_estimated_minutes'),
    sa.CheckConstraint('xp_reward >= 0 AND xp_reward <= 1000', name='valid_xp_reward'),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unit_id', 'sort_order', name='uq_lesson_unit_order')
    )
    op.create_index(op.f('ix_lessons_unit_id'), 'lessons', ['unit_id'], unique=False)
    op.create_table('lesson_exercises',
    sa.Column('lesson_id', sa.String(length=36), nullable=False),
    sa.Column('exercise_id', sa.String(length=36), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=False),
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('order_index >= 0', name='ck_lesson_exercise_order_index_non_negative'),
    sa.CheckConstraint('weight > 0', name='ck_lesson_exercise_weight_positive'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lesson_id', 'exercise_id', name='uq_lesson_exercise_unique'),
    sa.UniqueConstraint('lesson_id', 'order_index', name='uq_lesson_exercise_order')
    )
    op.create_index(op.f('ix_lesson_exercises_exercise_id'), 'lesson_exercises', ['exercise_id'], unique=False)
    op.create_index(op.f('ix_lesson_exercises_lesson_id'), 'lesson_exercises', ['lesson_id'], unique=False)
    op.create_table('lesson_prerequisites',
    sa.Column('lesson_id', sa.String(length=36), nullable=False),
    sa.Column('prerequisite_lesson_id', sa.String(length=36), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('lesson_id != prerequisite_lesson_id', name='no_self_prerequisite'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prerequisite_lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('lesson_id', 'prerequisite_lesson_id', name='uq_lesson_prerequisite')
    )
    op.create_index(op.f('ix_lesson_prerequisites_lesson_id'), 'lesson_prerequisites', ['lesson_id'], unique=False)
    op.create_index(op.f('ix_lesson_prerequisites_prerequisite_lesson_id'), 'lesson_prerequisites', ['prerequisite_lesson_id'], unique=False)
    op.create_table('user_activity_logs',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('action_type', sa.String(length=30), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('course_id', sa.String(length=36), nullable=True),
    sa.Column('lesson_id', sa.String(length=36), nullable=True),
    sa.Column('exercise_id', sa.String(length=36), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('action_metadata', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('duration_ms >= 0', name='check_duration_non_negative'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_activity_action_time', 'user_activity_logs', ['action_type', 'created_at'], unique=False)
    op.create_index('idx_user_activity_course_time', 'user_activity_logs', ['course_id', 'created_at'], unique=False)
    op.create_index('idx_user_activity_session', 'user_activity_logs', ['session_id', 'created_at'], unique=False)
    op.create_index('idx_user_activity_user_time', 'user_activity_logs', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_action_type'), 'user_activity_logs', ['action_type'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_course_id'), 'user_activity_logs', ['course_id'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_exercise_id'), 'user_activity_logs', ['exercise_id'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_lesson_id'), 'user_activity_logs', ['lesson_id'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_session_id'), 'user_activity_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_user_id'), 'user_activity_logs', ['user_id'], unique=False)
    op.create_table('user_exercise_interactions',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('exercise_id', sa.String(length=36), nullable=False),
    sa.Column('lesson_id', sa.String(length=36), nullable=True),
    sa.Column('interaction_type', sa.String(length=20), nullable=False),
    sa.Column('user_answer', sa.Text(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('time_taken', sa.Integer(), nullable=True),
    sa.Column('xp_earned', sa.Integer(), nullable=False),
    sa.Column('hints_used', sa.Integer(), nullable=False),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.String(length=36), nullable=True),
    sa.Column('interaction_metadata', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('attempt_number >= 1', name='check_attempt_number_positive'),
    sa.CheckConstraint('hints_used >= 0', name='check_hints_used_non_negative'),
    sa.CheckConstraint('time_taken >= 0', name='check_time_taken_non_negative'),
    sa.CheckConstraint('xp_earned >= 0', name='check_xp_earned_non_negative'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_exercise_interactions_exercise_id'), 'user_exercise_interactions', ['exercise_id'], unique=False)
    op.create_index(op.f('ix_user_exercise_interactions_lesson_id'), 'user_exercise_interactions', ['lesson_id'], unique=False)
    op.create_index(op.f('ix_user_exercise_interactions_user_id'), 'user_exercise_interactions', ['user_id'], unique=False)
    op.create_table('user_hearts_logs',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('course_id', sa.String(length=36), nullable=True),
    sa.Column('action_type', sa.String(length=20), nullable=False),
    sa.Column('hearts_before', sa.Integer(), nullable=False),
    sa.Column('hearts_after', sa.Integer(), nullable=False),
    sa.Column('hearts_changed', sa.Integer(), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('exercise_id', sa.String(length=36), nullable=True),
    sa.Column('lesson_id', sa.String(length=36), nullable=True),
    sa.Column('action_metadata', sa.Text(), nullable=True),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('hearts_after >= 0', name='check_hearts_after_non_negative'),
    sa.CheckConstraint('hearts_before >= 0', name='check_hearts_before_non_negative'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_hearts_logs_course_id'), 'user_hearts_logs', ['course_id'], unique=False)
    op.create_index(op.f('ix_user_hearts_logs_user_id'), 'user_hearts_logs', ['user_id'], unique=False)
    op.create_table('user_lesson_progresses',
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('lesson_id', sa.String(length=36), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('best_score', sa.Float(), nullable=True),
    sa.Column('last_score', sa.Float(), nullable=True),
    sa.Column('xp_earned', sa.Integer(), nullable=False),
    sa.Column('time_spent', sa.Integer(), nullable=False),
    sa.Column('first_completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_attempted_at', sa.DateTime(), nullable=True),
    sa.Column('is_locked', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('attempts >= 0', name='check_attempts_non_negative'),
    sa.CheckConstraint('best_score <= 100.0', name='check_best_score_max'),
    sa.CheckConstraint('best_score >= 0.0', name='check_best_score_min'),
    sa.CheckConstraint('last_score <= 100.0', name='check_last_score_max'),
    sa.CheckConstraint('last_score >= 0.0', name='check_last_score_min'),
    sa.CheckConstraint('time_spent >= 0', name='check_time_spent_non_negative'),
    sa.CheckConstraint('xp_earned >= 0', name='check_xp_earned_non_negative'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'lesson_id', name='unique_user_lesson_progress')
    )
    op.create_index(op.f('ix_user_lesson_progresses_lesson_id'), 'user_lesson_progresses', ['lesson_id'], unique=False)
    op.create_index(op.f('ix_user_lesson_progresses_user_id'), 'user_lesson_progresses', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_lesson_progresses_user_id'), table_name='user_lesson_progresses')
    op.drop_index(op.f('ix_user_lesson_progresses_lesson_id'), table_name='user_lesson_progresses')
    op.drop_table('user_lesson_progresses')
    op.drop_index(op.f('ix_user_hearts_logs_user_id'), table_name='user_hearts_logs')
    op.drop_index(op.f('ix_user_hearts_logs_course_id'), table_name='user_hearts_logs')
    op.drop_table('user_hearts_logs')
    op.drop_index(op.f('ix_user_exercise_interactions_user_id'), table_name='user_exercise_interactions')
    op.drop_index(op.f('ix_user_exercise_interactions_lesson_id'), table_name='user_exercise_interactions')
    op.drop_index(op.f('ix_user_exercise_interactions_exercise_id'), table_name='user_exercise_interactions')
    op.drop_table('user_exercise_interactions')
    op.drop_index(op.f('ix_user_activity_logs_user_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_session_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_lesson_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_exercise_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_course_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_action_type'), table_name='user_activity_logs')
    op.drop_index('idx_user_activity_user_time', table_name='user_activity_logs')
    op.drop_index('idx_user_activity_session', table_name='user_activity_logs')
    op.drop_index('idx_user_activity_course_time', table_name='user_activity_logs')
    op.drop_index('idx_user_activity_action_time', table_name='user_activity_logs')
    op.drop_table('user_activity_logs')
    op.drop_index(op.f('ix_lesson_prerequisites_prerequisite_lesson_id'), table_name='lesson_prerequisites')
    op.drop_index(op.f('ix_lesson_prerequisites_lesson_id'), table_name='lesson_prerequisites')
    op.drop_table('lesson_prerequisites')
    op.drop_index(op.f('ix_lesson_exercises_lesson_id'), table_name='lesson_exercises')
    op.drop_index(op.f('ix_lesson_exercises_exercise_id'), table_name='lesson_exercises')
    op.drop_table('lesson_exercises')
    op.drop_index(op.f('ix_lessons_unit_id'), table_name='lessons')
    op.drop_table('lessons')
    op.drop_index(op.f('ix_units_section_id'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_user_daily_xps_user_id'), table_name='user_daily_xps')
    op.drop_index(op.f('ix_user_daily_xps_date'), table_name='user_daily_xps')
    op.drop_index(op.f('ix_user_daily_xps_course_id'), table_name='user_daily_xps')
    op.drop_table('user_daily_xps')
    op.drop_index(op.f('ix_user_courses_user_id'), table_name='user_courses')
    op.drop_index(op.f('ix_user_courses_course_id'), table_name='user_courses')
    op.drop_table('user_courses')
    op.drop_index(op.f('ix_user_achievements_user_id'), table_name='user_achievements')
    op.drop_index(op.f('ix_user_achievements_achievement_id'), table_name='user_achievements')
    op.drop_table('user_achievements')
    op.drop_index(op.f('ix_sections_course_id'), table_name='sections')
    op.drop_table('sections')
    op.drop_index(op.f('ix_exercise_options_exercise_id'), table_name='exercise_options')
    op.drop_table('exercise_options')
    op.drop_index(op.f('ix_system_audit_logs_resource_id'), table_name='system_audit_logs')
    op.drop_index(op.f('ix_system_audit_logs_admin_user_id'), table_name='system_audit_logs')
    op.drop_index(op.f('ix_system_audit_logs_action_type'), table_name='system_audit_logs')
    op.drop_index('idx_system_audit_resource', table_name='system_audit_logs')
    op.drop_index('idx_system_audit_admin_time', table_name='system_audit_logs')
    op.drop_index('idx_system_audit_action_time', table_name='system_audit_logs')
    op.drop_table('system_audit_logs')
    op.drop_index(op.f('ix_o_auth_providers_user_id'), table_name='o_auth_providers')
    op.drop_table('o_auth_providers')
    op.drop_index(op.f('ix_exercises_exercise_type_id'), table_name='exercises')
    op.drop_table('exercises')
    op.drop_index(op.f('ix_courses_to_language_id'), table_name='courses')
    op.drop_index(op.f('ix_courses_from_language_id'), table_name='courses')
    op.drop_table('courses')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_languages_code'), table_name='languages')
    op.drop_table('languages')
    op.drop_index(op.f('ix_exercise_types_name'), table_name='exercise_types')
    op.drop_table('exercise_types')
    op.drop_table('audio_files')
    op.drop_table('achievements')
    # ### end Alembic commands ###
